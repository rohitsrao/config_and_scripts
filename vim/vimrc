"Skip pretending to be vi
set nocompatible

"Enable syntax and solarized colorscheme
syntax enable
set t_Co=256
colorscheme minimalist

"Display Hybrid  Line Numbers
set number relativenumber

"Open new vertical split windows on the right
"Open new split windows below
set splitright
set splitbelow

"Do not create backup and swap files
set nobackup
set nowritebackup
set noswapfile

"Disable Parenthesis Matching
set noshowmatch

"Code Folding
set foldmethod=manual
autocmd BufWinLeave *.* mkview
autocmd BufWinEnter *.* silent loadview

"Search down into subfolders
"Provides tab-completion for all file-related tasks
set path+=**

"Display all matching files when we tab complete
set wildmenu

"Tag Jumping
"Create the 'tags' file
" - Use ^] to jump to tag under cursor
" - Use g^] for ambiguous tags
" - Use ^t to jump back up the tag stack
command! MakeTags !ctags -R

" ----------- Key Mappings ---------

" Disabling Arrow Keys in Normal Mode
noremap <Up> <NOP>
noremap <Down> <NOP>
noremap <Left> <NOP>
noremap <Right> <NOP>

" Disabling Arrow Keys in Insert Mode
inoremap <Up> <NOP>
inoremap <Down> <NOP>
inoremap <Left> <NOP>
inoremap <Right> <NOP>

" Custom Mapping for split navigation
map <C-h> <C-w>h
map <C-j> <C-w>j
map <C-k> <C-w>k
map <C-l> <C-w>l

" Custom Mapping for split window resizing
noremap <silent> <C-Up> :resize +1<CR>
noremap <silent> <C-Down> :resize -1<CR>
noremap <silent> <C-Right> :vertical resize +1<CR>
noremap <silent> <C-Left> :vertical resize -1<CR>

" Start of vim-plug Manager
call plug#begin()
	Plug 'vim-scripts/AutoClose'					"Autoclose paranthesis and quotations
	Plug 'scrooloose/nerdtree'						"File browser
	Plug 'SirVer/ultisnips'			    			"Ultisnips Snippets
	Plug 'thaerkh/vim-indentguides' 			"Indent Guide Lines
	Plug 'tpope/vim-fugitive'       			"Vim Plugin for Git
	Plug 'sheerun/vim-polyglot'     			"Language Syntax
	Plug 'vim-test/vim-test' 							"Testing within vim
	Plug 'vim-airline/vim-airline' 				"Vim Airline Status Bar
	Plug 'vim-airline/vim-airline-themes' "Vim Airline Theme
	Plug 'styled-components/vim-styled-components', { 'branch': 'main' }
	Plug 'thosakwe/vim-flutter' 					"Hot Reload on Save in Flutter
	Plug 'junegunn/fzf', { 'do': { -> fzf#install() } }
	Plug 'junegunn/fzf.vim' 							"Fuzzy File Search Vim
	Plug 'neoclide/coc.nvim', {'branch': 'release'} "Code Completion
	"Plug 'ervandew/supertab'							"SuperTab to use YouCompleteMe with UltiSnip
	"Plug 'Valloric/YouCompleteMe'					"Code Completion
	"Plug 'lervag/vimtex'			"LaTeX filetype plugin
	"Plug 'tpope/vim-surround' "Matching Paranthesis and Tags
call plug#end()
" End of vim-plug Managaer

" NERDTree Settings
nmap <C-f> :NERDTreeToggle<CR>
let NERDTreeShowLineNumbers=1
autocmd Filetype nerdtree setlocal relativenumber

"ultisnips settings
let g:UltiSnipsExpandTrigger="<tab>"
let g:UltiSnipsJumpForwardTrigger="<tab>"
let g:UltiSnipsJumpBackwardTrigger="<c-s-tab>"
let g:UltiSnipsSnippetDirectories=['~/.vim/UltiSnips', 'UltiSnips']
let g:UltiSnipsEditSplit="vertical"

"vim-polyglot settings
let g:python_highlight_space_errors=0
let g:dart_style_guide=1

"vim-indentguides settings
let g:indentguides_spacechar='|'
let g:indentguides_tabchar='|'

"vim-test settings
let test#python#runner = 'pytest'
let test#python#pytest#executable = 'RUN_ENV=TEST pytest'
let test#dart#runner = 'fluttertest'
let test#dart#fluttertest#options = '-r expanded -d 192.168.0.115:5555'
let test#javascript#runner = 'jest'
let test#project_root = 'server'
let test#javascript#jest#executable = 'NODE_ENV=test $(yarn bin)/jest'
let test#javascript#jest#options = '--runInBand'
"let test#javascript#jest#options = '--runInBand --detectOpenHandles --forceExit'
nmap <silent> tF :TestFile<CR>
nmap <silent> tN :TestNearest<CR>
nmap <silent> tL :TestLast<CR>
nmap <silent> tS :TestSuite<CR>

" vim-airline settings
let g:airline_theme='minimalist'
let g:airline_powerline_fonts = 1
let g:airline_left_sep = ''
let g:airline_right_sep = ''
let g:airline_section_b = '%{FugitiveStatusline()}'
let g:airline#extensions#whitespace#enabled = 0

" vim-flutter settings
nmap <silent> fD :FlutterDevices<CR>
nmap <silent> fR :FlutterRun<CR>
nmap <silent> fH :FlutterHotRestart<CR>
nmap <silent> fQ :FlutterQuit<CR>

" fzf settings
nnoremap <silent> <C-d> :Files<CR>
nnoremap <silent> <C-g> :GFiles<CR>
nnoremap <silent> <C-p> :Rg! 

" coc settings - start

" tab to cycle
inoremap <silent><expr> <TAB>
      \ pumvisible() ? "\<C-n>" :
      \ <SID>check_back_space() ? "\<TAB>" :
      \ coc#refresh()
" GoTo code navigation.
nmap <silent> gd <Plug>(coc-definition)
nmap <silent> gy <Plug>(coc-type-definition)
nmap <silent> gi <Plug>(coc-implementation)
nmap <silent> gr <Plug>(coc-references)
nnoremap <silent> K :call <SID>show_documentation()<CR> 

" coc settings - end

" functions
function! s:show_documentation()
  if (index(['vim','help'], &filetype) >= 0)
    execute 'h '.expand('<cword>')
  elseif (coc#rpc#ready())
    call CocActionAsync('doHover')
  else
    execute '!' . &keywordprg . " " . expand('<cword>')
  endif
endfunction

" make YCM compatible with UltiSnips (using supertab)
"let g:ycm_key_list_select_completion = ['<C-n>', '<Down>']
"let g:ycm_key_list_previous_completion = ['<C-p>', '<Up>']
"let g:SuperTabDefaultCompletionType = '<C-n>'

"vimtex settings
"let g:tex_flavor='latex'
"let g:vimtex_view_method='zathura'
"let g:vimtex_quickfix_mode=0
"set conceallevel=1
"let g:tex_conceal='abdmg'
