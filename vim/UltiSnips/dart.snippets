global !p
def convertToLowercase(text):
    return text.lower()
endglobal

snippet actions "actions attribute"
actions: <Widget>[
	$1
]
endsnippet	

snippet blocbuilder "bloc builder"
BlocBuilder<$1Bloc, $1State>(
	builder: (context, state) {
	}
),
endsnippet

snippet blocinit "boiler plate for _bloc.dart"
import 'dart:async';

import 'package:equatable/equatable.dart';
import 'package:flutter_bloc/flutter_bloc.dart';

part '`!p snip.rv = convertToLowercase(t[1])`_event.dart';
part '`!p snip.rv = convertToLowercase(t[1])`_state.dart';

class $1Bloc extends Bloc<$1Event, $1State> {

	$1Bloc() : super();
}
endsnippet

snippet bloceventinit "boiler plate for _event.dart"
part of '`!p snip.rv = convertToLowercase(t[1])`_bloc.dart';

abstract class $1Event extends Equatable {
	const $1Event();

  @override
  List<Object?> get props => [];
}
endsnippet

snippet blocprovider "boiler plate for bloc provider"
BlocProvider<$1>(create: (context) => $1()),
endsnippet

snippet blocstateinit "boiler plate for _state.dart"
part of '`!p snip.rv = convertToLowercase(t[1])`_bloc.dart';

abstract class $1State extends Equatable {
	const $1State();

  @override
  List<Object?> get props => [];
}
endsnippet

snippet class "boiler plate for class"
class $1 {

}
endsnippet

snippet column "Create column widget"
Column(
	children: <Widget>[
	]
),
endsnippet	

snippet didchangedependencies "didChangeDependencies metho"
@override
void didChangeDependencies() {
	super.didChangeDependencies();
	$1
}
endsnippet	

snippet dispose "dispose method"
@override
void dispose() {
	$1
	super.dispose();
}
endsnippet

snippet imp "import statement"
import '$1';
endsnippet

snippet initstate "initState method"
@override
void initState() {
	$1
	super.initState();
}
endsnippet

snippet propsgetter "overriding props getter for class extending Equatable"
@override
List<Object?> get props => [$1];
endsnippet

snippet row "Create row widget"
Row(
	children: <Widget>[
	]
),
endsnippet	

snippet stateful "create stateful widget"
class $1 extends StatefulWidget {
	@override
	_$1State createState() => _$1State();
}

class _$1State extends State<$1>{
	@override
	Widget build(BuildContext context) {
		return $2;
	}
}
endsnippet	

snippet stateless "create stateless widget"
class $1 extends StatelessWidget {
	
	const $1({Key? key}) : super(key: key);
	
	@override
	Widget build(BuildContext context){
		return ;
	}
}
endsnippet	

snippet tc "try catch block"
try {
	$1
}
catch (_) {}
endsnippet

snippet testwidget "testWidgets method"
testWidgets('$1', (WidgetTester tester) async {
	await tester.pumpWidget($2);
});
endsnippet
